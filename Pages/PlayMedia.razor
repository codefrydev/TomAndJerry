@page "/playmedia/{videId}"
@using TomAndJerry.Services
@inject NavigationManager nav
@inject IVideoService VideoService
@inject IStateService StateService
@inject IJSRuntime JS

<PageTitle>@(currentVideo?.CommentName?.Substring(6) ?? "Tom & Jerry") - Tom & Jerry</PageTitle>

<div class="min-h-screen cartoon-bg">
    <div class="max-w-7xl mx-auto px-2 sm:px-4 lg:px-8 py-2 sm:py-4 lg:py-6">
        <div class="grid grid-cols-1 xl:grid-cols-4 gap-3 sm:gap-4 lg:gap-6">
            <!-- Main Content Area -->
            <div class="xl:col-span-3 space-y-4 sm:space-y-6">
                <!-- Video Player - Fixed Position -->
                <div class="sticky top-2 sm:top-4 z-10">
                    <div class="relative bg-black rounded-xl sm:rounded-2xl overflow-hidden shadow-2xl border-2 sm:border-4 border-jerry-brown">
                        <div class="video-container">
                            <iframe src="@GetEmbeddableUrl(currentVideo?.VideoUrl ?? "")"
                                    frameborder="0"
                                    allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
                                    allowfullscreen
                                    key="@currentVideo?.Id">
                            </iframe>
                        </div>
                    </div>
                </div>
                
                <!-- Video Title and Info -->
                <div class="tom-jerry-card p-4 sm:p-6">
                    <h1 class="text-xl sm:text-2xl md:text-3xl font-bold font-cartoon text-amber-800 leading-tight mb-4 sm:mb-6 cartoon-text">
                        @(currentVideo?.CommentName?.Substring(6) ?? "Tom & Jerry Episode")
                    </h1>
                    
                    <!-- Video Stats and Actions -->
                    <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-3 sm:gap-4 mb-4 sm:mb-6">
                        <div class="flex flex-col sm:flex-row sm:items-center space-y-2 sm:space-y-0 sm:space-x-4 lg:space-x-6 text-xs sm:text-sm text-amber-800 font-semibold">
                            <div class="flex items-center space-x-2">
                                <svg class="w-4 h-4 text-cartoon-red" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M10 12a2 2 0 100-4 2 2 0 000 4z"/>
                                    <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd"/>
                                </svg>
                                <span class="font-bold font-comic">@GetRandomViews() views</span>
                            </div>
                            <div class="flex items-center space-x-2">
                                <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                </svg>
                                <span class="font-comic">@GetRandomTimeAgo()</span>
                            </div>
                            <div class="flex items-center space-x-1">
                                <div class="flex text-cartoon-yellow">
                                    @for (int i = 0; i < 5; i++)
                                    {
                                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                                        </svg>
                                    }
                                </div>
                                <span class="text-sm font-bold font-comic">4.8</span>
                            </div>
                        </div>
                        
                        <div class="flex flex-wrap items-center gap-2 sm:gap-3">
                            <button class="flex items-center space-x-1 sm:space-x-2 px-3 sm:px-4 lg:px-6 py-2 sm:py-3 bg-soft-blue hover:bg-cartoon-yellow rounded-full transition-all duration-200 font-bold font-comic text-amber-800 hover:text-amber-900 text-xs sm:text-sm lg:text-base cartoon-rounded">
                                <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905 0 .714-.211 1.412-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5"></path>
                                </svg>
                                <span class="hidden sm:inline">@GetRandomLikes()</span>
                                <span class="sm:hidden">Like</span>
                            </button>
                            <button class="flex items-center space-x-2 px-4 sm:px-6 py-2 sm:py-3 bg-soft-red hover:bg-cartoon-pink rounded-full transition-all duration-200 font-bold font-comic text-amber-800 hover:text-amber-900 text-sm sm:text-base cartoon-rounded">
                                <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                                </svg>
                                <span>Share</span>
                            </button>
                            <button class="flex items-center space-x-2 px-4 sm:px-6 py-2 sm:py-3 bg-soft-yellow hover:bg-cartoon-yellow rounded-full transition-all duration-200 font-bold font-comic text-amber-800 hover:text-amber-900 text-sm sm:text-base cartoon-rounded">
                                <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z"></path>
                                </svg>
                                <span>Save</span>
                            </button>
                            <button class="flex items-center space-x-2 px-4 sm:px-6 py-2 sm:py-3 bg-soft-blue hover:bg-cartoon-yellow rounded-full transition-all duration-200 font-bold font-comic text-amber-800 hover:text-amber-900 text-sm sm:text-base cartoon-rounded">
                                <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"></path>
                                </svg>
                            </button>
                        </div>
                    </div>
                    
                    <!-- Channel Info -->
                    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between py-6 border-t border-gray-200 space-y-4 sm:space-y-0">
                        <div class="flex items-center space-x-4">
                            <div class="relative">
                                <div class="w-12 h-12 sm:w-14 sm:h-14 rounded-full shadow-lg overflow-hidden ring-2 ring-red-100">
                                    <img src="Tom.png" alt="Tom & Jerry" class="w-full h-full object-cover"/>
                                </div>
                                <div class="absolute -bottom-1 -right-1 w-4 h-4 sm:w-5 sm:h-5 bg-green-500 rounded-full border-2 border-white"></div>
                            </div>
                            <div class="flex-1 min-w-0">
                                <h3 class="font-bold text-gray-900 text-base sm:text-lg truncate">Tom & Jerry Channel</h3>
                                <div class="flex flex-col sm:flex-row sm:items-center space-y-1 sm:space-y-0 sm:space-x-2 text-sm text-gray-600">
                                    <span class="font-medium">2.5M subscribers</span>
                                    <span class="hidden sm:inline">•</span>
                                    <span>@GetRandomVideos() videos</span>
                                </div>
                                <p class="text-sm text-gray-500 mt-1 hidden sm:block">The classic cat and mouse duo that has entertained generations!</p>
                            </div>
                        </div>
                        <div class="flex items-center space-x-3">
                            <button class="px-6 sm:px-8 py-2 sm:py-3 bg-red-600 text-white rounded-full hover:bg-red-700 transition-all duration-200 font-semibold shadow-lg hover:shadow-xl text-sm sm:text-base">
                                Subscribe
                            </button>
                            <button class="w-10 h-10 bg-gray-100 hover:bg-gray-200 rounded-full flex items-center justify-center transition-colors">
                                <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5-5-5h5v-5a7.5 7.5 0 00-15 0v5h5l-5 5-5-5h5v-5a7.5 7.5 0 0115 0v5z"/>
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Video Description -->
                <div class="bg-white rounded-2xl p-6 shadow-lg border border-gray-100">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-xl font-bold text-gray-900">Description</h3>
                        <button class="text-sm text-red-600 hover:text-red-800 font-semibold px-3 py-1 rounded-full hover:bg-red-50 transition-colors">
                            Show more
                        </button>
                    </div>
                    <div class="prose prose-sm max-w-none">
                        <p class="text-gray-700 leading-relaxed mb-4">
                            @(currentVideo?.Description ?? "Classic Tom & Jerry episode featuring the timeless rivalry between the clever mouse Jerry and the determined cat Tom. Watch as they engage in their hilarious antics and chase sequences that have made this cartoon duo legendary.")
                        </p>
                        <div class="flex flex-wrap gap-2">
                            <span class="px-3 py-1 bg-red-100 text-red-800 text-xs font-medium rounded-full">#TomAndJerry</span>
                            <span class="px-3 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded-full">#Cartoon</span>
                            <span class="px-3 py-1 bg-green-100 text-green-800 text-xs font-medium rounded-full">#Classic</span>
                            <span class="px-3 py-1 bg-yellow-100 text-yellow-800 text-xs font-medium rounded-full">#Comedy</span>
                        </div>
                    </div>
                </div>
                
                <!-- Comments Section -->
                <div class="bg-white rounded-2xl shadow-lg border border-gray-100">
                    <div class="p-6 border-b border-gray-200">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-3">
                                <h3 class="text-xl font-bold text-gray-900">Comments</h3>
                                <span class="px-3 py-1 bg-gray-100 text-gray-600 text-sm font-medium rounded-full">@GetRandomComments()</span>
                            </div>
                            <div class="flex items-center space-x-2">
                                <button class="flex items-center space-x-2 px-4 py-2 text-sm text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                                    </svg>
                                    <span>Sort by</span>
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    @if (show)
                    {
                        <div class="p-8 text-center">
                            <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                                <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                                </svg>
                            </div>
                            <h4 class="text-lg font-semibold text-gray-900 mb-2">Join the conversation</h4>
                            <p class="text-gray-600 mb-6">Share your thoughts and connect with other fans!</p>
                            <button @onclick="ShowComment"
                                    class="px-8 py-3 bg-red-600 text-white rounded-full hover:bg-red-700 transition-all duration-200 font-semibold shadow-lg hover:shadow-xl">
                                Show Comments
                            </button>
                        </div>
                    }
                    else
                    {
                        <div>
                            <div class="border-b border-gray-200">
                                <nav class="flex space-x-8 px-6">
                                    <button @onclick="@(() => { activeTab = "giscus"; StateHasChanged(); })" 
                                            class="@(activeTab == "giscus" ? "border-red-500 text-red-600" : "border-transparent text-gray-500 hover:text-gray-700") py-4 px-1 border-b-2 font-medium text-sm transition-colors">
                                        Giscus
                                    </button>
                                    <button @onclick="@(async () => { activeTab = "disqus"; await LoadGiscud(currentVideo?.CommentName ?? ""); StateHasChanged(); })" 
                                            class="@(activeTab == "disqus" ? "border-red-500 text-red-600" : "border-transparent text-gray-500 hover:text-gray-700") py-4 px-1 border-b-2 font-medium text-sm transition-colors">
                                        Disqus
                                    </button>
                                </nav>
                            </div>
                            <div class="p-6">
                                @if (activeTab == "giscus")
                                {
                                    <Giscus Term="@(currentVideo?.CommentName ?? "")"/>
                                }
                                else
                                {
                                    <div id="disqus_thread"></div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
            
            <!-- Sidebar -->
            <div class="xl:col-span-1">
                <div class="sticky top-6 space-y-6 max-h-screen overflow-y-auto">
                    <!-- Autoplay Toggle -->
                    <div class="tom-jerry-card p-4">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-3">
                                <div class="w-10 h-10 bg-soft-red rounded-full flex items-center justify-center cartoon-rounded">
                                    <svg class="w-5 h-5 text-cartoon-red" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd"/>
                                    </svg>
                                </div>
                                <div>
                                    <h3 class="font-bold font-cartoon text-amber-800">Up next</h3>
                                    <p class="text-sm text-amber-900 font-comic font-semibold">Autoplay is on</p>
                                </div>
                            </div>
                            <button class="relative inline-flex h-6 w-11 items-center rounded-full bg-cartoon-red transition-colors focus:outline-none focus:ring-2 focus:ring-cartoon-red focus:ring-offset-2 cartoon-rounded">
                                <span class="inline-block h-4 w-4 transform rounded-full bg-white transition-transform translate-x-6"></span>
                            </button>
                        </div>
                    </div>
                    
                    <!-- Video List -->
                    <div class="space-y-4">
                        @foreach (var item in randomVideos)
                        {
                            <div @onclick="()=>GoTOPage(item)" class="cursor-pointer group">
                                <Thumbnail VideoModel="@item"/>
                            </div>
                        }
                    </div>
                    
                    <!-- Load More Button -->
                    <div class="text-center">
                        @if (hasMoreVideos)
                        {
                            <button @onclick="LoadMoreVideos" 
                                    disabled="@isLoadingMore"
                                    class="px-6 py-3 bg-soft-blue hover:bg-cartoon-yellow text-amber-800 rounded-full font-bold font-comic transition-colors cartoon-rounded disabled:opacity-50 disabled:cursor-not-allowed">
                                @if (isLoadingMore)
                                {
                                    <div class="flex items-center space-x-2">
                                        <svg class="animate-spin h-4 w-4" fill="none" viewBox="0 0 24 24">
                                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                        </svg>
                                        <span>Loading...</span>
                                    </div>
                                }
                                else
                                {
                                    <span>Load more videos</span>
                                }
                            </button>
                        }
                        else
                        {
                            <div class="px-6 py-3 text-amber-600 font-comic text-sm">
                                No more videos to load
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    bool show = false;
    string activeTab = "giscus";
    [Parameter] public string VideId { get; set; } = string.Empty;
    
    private Video? currentVideo;
    private List<Video> randomVideos = new();
    private int currentVideoCount = 8;
    private int videosPerLoad = 8;
    private bool isLoadingMore = false;
    private bool hasMoreVideos = true;

    private void GoTOPage(Video video)
    {
        // Navigate to the new video page
        nav.NavigateTo($"playmedia/{video.Id}");
    }

    async Task LoadGiscud(string id)
    {
        await JS.InvokeVoidAsync("loadDisqus", nav.Uri, id);
    }

    void ShowComment()
    {
        show = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        StateService.OnStateChanged += StateHasChanged;
        await LoadVideoData();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        // Reload video data when VideId parameter changes (e.g., when navigating to a new video)
        await LoadVideoData();
    }
    
    private async Task LoadVideoData()
    {
        await StateService.SetLoadingStateAsync(true);
        
        try
        {
            await VideoService.InitializeAsync();
            currentVideo = await VideoService.GetVideoByIdAsync(VideId);
            
            // Reset video list and load initial videos
            randomVideos.Clear();
            currentVideoCount = videosPerLoad;
            hasMoreVideos = true;
            
            var initialVideos = await VideoService.GetRandomVideosAsync(videosPerLoad);
            randomVideos.AddRange(initialVideos);
            
            // Reset comments state for new video
            show = false;
            activeTab = "giscus";
        }
        finally
        {
            await StateService.SetLoadingStateAsync(false);
        }
    }

    private async Task LoadMoreVideos()
    {
        if (isLoadingMore || !hasMoreVideos) return;
        
        isLoadingMore = true;
        StateHasChanged();
        
        try
        {
            // Get all videos to check if we have more available
            var allVideos = await VideoService.GetAllVideosAsync();
            var allVideosList = allVideos.ToList();
            
            // Check if we have more videos to load
            if (currentVideoCount >= allVideosList.Count)
            {
                hasMoreVideos = false;
                return;
            }
            
            // Load more videos (excluding current video and already loaded videos)
            var remainingVideos = allVideosList
                .Where(v => v.Id != currentVideo?.Id && !randomVideos.Any(rv => rv.Id == v.Id))
                .ToList();
            
            var videosToAdd = remainingVideos
                .OrderBy(x => Guid.NewGuid()) // Randomize
                .Take(videosPerLoad)
                .ToList();
            
            randomVideos.AddRange(videosToAdd);
            currentVideoCount += videosToAdd.Count;
            
            // Check if we've loaded all available videos
            if (currentVideoCount >= allVideosList.Count || videosToAdd.Count < videosPerLoad)
            {
                hasMoreVideos = false;
            }
        }
        catch (Exception ex)
        {
            // Handle error - in a real app you might want to show an error message
            Console.WriteLine($"Error loading more videos: {ex.Message}");
        }
        finally
        {
            isLoadingMore = false;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        StateService.OnStateChanged -= StateHasChanged;
    }
    
    private string GetRandomViews()
    {
        var random = new Random();
        var views = random.Next(100000, 10000000);
        if (views >= 1000000)
        {
            return $"{views / 1000000:F1}M";
        }
        else if (views >= 1000)
        {
            return $"{views / 1000:F1}K";
        }
        return views.ToString();
    }
    
    private string GetRandomTimeAgo()
    {
        var random = new Random();
        var days = random.Next(1, 365);
        if (days < 7)
            return $"{days} days ago";
        else if (days < 30)
            return $"{days / 7} weeks ago";
        else if (days < 365)
            return $"{days / 30} months ago";
        else
            return $"{days / 365} years ago";
    }
    
    private string GetRandomLikes()
    {
        var random = new Random();
        var likes = random.Next(100, 50000);
        if (likes >= 1000)
        {
            return $"{likes / 1000:F1}K";
        }
        return likes.ToString();
    }
    
    private string GetRandomVideos()
    {
        var random = new Random();
        var videos = random.Next(50, 500);
        return $"{videos}";
    }
    
    private string GetRandomComments()
    {
        var random = new Random();
        var comments = random.Next(10, 1000);
        if (comments >= 1000)
        {
            return $"{comments / 1000:F1}K comments";
        }
        return $"{comments} comments";
    }
    
    private string GetEmbeddableUrl(string originalUrl)
    {
        if (string.IsNullOrEmpty(originalUrl))
            return "";
            
        // Check if it's a Google Drive URL
        if (originalUrl.Contains("drive.google.com"))
        {
            // Extract file ID from various Google Drive URL formats
            var fileId = ExtractFileIdFromGoogleDriveUrl(originalUrl);
            if (!string.IsNullOrEmpty(fileId))
            {
                return $"https://drive.google.com/file/d/{fileId}/preview";
            }
        }
        
        // Return original URL if not a Google Drive URL or if extraction failed
        return originalUrl;
    }
    
    private string ExtractFileIdFromGoogleDriveUrl(string url)
    {
        try
        {
            // Handle different Google Drive URL formats
            if (url.Contains("/file/d/"))
            {
                var startIndex = url.IndexOf("/file/d/") + 8;
                var endIndex = url.IndexOf("/", startIndex);
                if (endIndex == -1) endIndex = url.Length;
                return url.Substring(startIndex, endIndex - startIndex);
            }
            else if (url.Contains("id="))
            {
                var startIndex = url.IndexOf("id=") + 3;
                var endIndex = url.IndexOf("&", startIndex);
                if (endIndex == -1) endIndex = url.Length;
                return url.Substring(startIndex, endIndex - startIndex);
            }
        }
        catch
        {
            // If extraction fails, return empty string
        }
        
        return "";
    }
}
