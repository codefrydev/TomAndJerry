@page "/"
@using TomAndJerry.Services
@using TomAndJerry.Model
@using TomAndJerry.Component
@using TomAndJerry.Utils
@inject NavigationManager nav
@inject IVideoService VideoService
@inject IStateService StateService
@inject IJSRuntime JSRuntime
@inject IStickerService StickerService
@inject IRandomFactsService RandomFactsService
<PageTitle>Home - Tom & Jerry</PageTitle>

<div class="min-h-screen cartoon-bg">
    <!-- Hero Section -->
    <div class="tom-jerry-header relative overflow-hidden">
        <!-- Animated Background Elements -->
        <div class="absolute inset-0 overflow-hidden">
            <div class="absolute -top-10 -left-10 w-32 h-32 bg-white/10 rounded-full bg-element"></div>
            <div class="absolute top-20 -right-10 w-24 h-24 bg-cartoon-yellow/20 rounded-full bg-element" style="animation-delay: 1s"></div>
            <div class="absolute bottom-10 left-1/4 w-16 h-16 bg-cartoon-red/20 rounded-full bg-element" style="animation-delay: 2s"></div>
            <div class="absolute bottom-20 right-1/4 w-20 h-20 bg-tom-blue/20 rounded-full bg-element" style="animation-delay: 0.5s"></div>
        </div>
        
        <div class="max-w-7xl mx-auto px-4 py-12 relative z-10">
            <div class="text-center text-white">
                <!-- Character Battle Section -->
                <div class="flex items-center justify-center mb-6 sm:mb-8">
                    <div class="tom-character group cursor-pointer" @onclick="@(() => ShowCharacterInfo("Tom"))">
                        <div class="w-20 h-20 sm:w-24 sm:h-24 rounded-full overflow-hidden shadow-2xl transform transition-all duration-300 group-hover:scale-110 group-hover:rotate-3">
                            <RandomSticker Category="classic" CssClass="w-full h-full" ImageCssClass="w-full h-full object-cover" AutoRefresh="true" RefreshIntervalSeconds="10" />
                        </div>
                        <div class="mt-2 text-center">
                            <div class="text-sm sm:text-base font-bold font-cartoon text-white drop-shadow-lg">TOM</div>
                            <div class="text-xs font-comic text-white drop-shadow-md">The Cat</div>
                        </div>
                    </div>
                    
                    <div class="mx-4 sm:mx-6 text-3xl sm:text-5xl font-bold font-cartoon cartoon-text animate-wiggle">
                        <div class="relative">
                            <span class="gradient-text bg-clip-text text-transparent drop-shadow-lg">VS</span>
                            <div class="absolute -top-2 -right-2 text-lg animate-bounce">⚔️</div>
                        </div>
                    </div>
                    
                    <div class="jerry-character group cursor-pointer" @onclick="@(() => ShowCharacterInfo("Jerry"))">
                        <div class="w-16 h-16 sm:w-20 sm:h-20 rounded-full overflow-hidden shadow-2xl transform transition-all duration-300 group-hover:scale-110 group-hover:-rotate-3">
                            <RandomSticker Category="playful" CssClass="w-full h-full" ImageCssClass="w-full h-full object-cover" AutoRefresh="true" RefreshIntervalSeconds="8" />
                        </div>
                        <div class="mt-2 text-center">
                            <div class="text-sm sm:text-base font-bold font-cartoon text-white drop-shadow-lg">JERRY</div>
                            <div class="text-xs font-comic text-white drop-shadow-md">The Mouse</div>
                        </div>
                    </div>
                </div>
                
                <!-- Main Title with Animation -->
                <div class="mb-4 sm:mb-6">
                    <h1 class="text-4xl sm:text-5xl md:text-6xl lg:text-7xl font-bold font-cartoon cartoon-text mb-2 animate-fadeInUp">
                        <span class="gradient-text bg-clip-text text-transparent">
                            Tom & Jerry
                        </span>
                    </h1>
                    <div class="text-lg sm:text-xl md:text-2xl text-white font-comic animate-fadeInUp drop-shadow-lg font-bold" style="animation-delay: 0.2s">
                        The Ultimate Cat & Mouse Showdown! 🎭
                    </div>
                </div>
                
                <!-- Interactive Description -->
                <div class="mb-8 sm:mb-10 max-w-3xl mx-auto px-4">
                    <p class="text-base sm:text-lg md:text-xl text-white mb-4 font-comic leading-relaxed animate-fadeInUp drop-shadow-lg font-semibold" style="animation-delay: 0.4s">
                        Experience the timeless rivalry that has entertained generations! Watch as Tom the cat tries every trick in the book to catch Jerry the mouse, 
                        but Jerry always finds a clever way to escape. From classic 1940s episodes to modern adventures, 
                        every chase is filled with laughter, creativity, and pure cartoon magic! ✨
                    </p>
                    
                    <!-- Fun Facts Carousel -->
                    <div class="bg-white/10 backdrop-blur-sm rounded-2xl p-4 mb-6 animate-fadeInUp fact-carousel" style="animation-delay: 0.6s">
                        <div class="text-sm sm:text-base text-white font-comic drop-shadow-lg font-semibold">
                            <span class="text-yellow-300 font-bold drop-shadow-lg">💡 Fun Fact:</span> 
                            <span id="fun-fact-text" class="drop-shadow-lg">Tom & Jerry won 7 Academy Awards for Best Animated Short Film!</span>
                        </div>
                    </div>
                </div>
                
                <!-- Enhanced Stats Grid -->
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 max-w-4xl mx-auto px-4 animate-fadeInUp" style="animation-delay: 0.8s">
                    <div class="tom-jerry-card p-4 sm:p-6 group hover:scale-105 transition-all duration-300">
                        <div class="text-center">
                            <div class="text-3xl sm:text-4xl font-bold mb-2 font-cartoon text-blue-600 group-hover:text-red-600 transition-colors">
                                @StateService.CurrentVideos.Count()
                            </div>
                            <div class="text-sm sm:text-base text-amber-800 font-comic font-bold">Episodes Available</div>
                            <div class="text-xs text-amber-900 font-comic mt-1">Watch anytime!</div>
                        </div>
                    </div>
                    
                    <div class="tom-jerry-card p-4 sm:p-6 group hover:scale-105 transition-all duration-300">
                        <div class="text-center">
                            <div class="text-3xl sm:text-4xl font-bold mb-2 font-cartoon text-red-600 group-hover:text-blue-600 transition-colors">1940</div>
                            <div class="text-sm sm:text-base text-amber-800 font-comic font-bold">First Episode</div>
                            <div class="text-xs text-amber-900 font-comic mt-1">Over 80 years!</div>
                        </div>
                    </div>
                    
                    <div class="tom-jerry-card p-4 sm:p-6 group hover:scale-105 transition-all duration-300">
                        <div class="text-center">
                            <div class="text-3xl sm:text-4xl font-bold mb-2 font-cartoon text-yellow-600 group-hover:text-red-600 transition-colors">∞</div>
                            <div class="text-sm sm:text-base text-amber-800 font-comic font-bold">Laughs Generated</div>
                            <div class="text-xs text-amber-900 font-comic mt-1">Countless smiles!</div>
                        </div>
                    </div>
                    
                    <div class="tom-jerry-card p-4 sm:p-6 group hover:scale-105 transition-all duration-300">
                        <div class="text-center">
                            <div class="text-3xl sm:text-4xl font-bold mb-2 font-cartoon text-pink-600 group-hover:text-yellow-600 transition-colors">7</div>
                            <div class="text-sm sm:text-base text-amber-800 font-comic font-bold">Oscar Awards</div>
                            <div class="text-xs text-amber-900 font-comic mt-1">Animation legend!</div>
                        </div>
                    </div>
                </div>
                <div class="max-w-7xl mx-auto px-4 py-6 sm:py-8">
                    <div class="text-center">
                        <h2 class="text-2xl sm:text-3xl font-bold font-cartoon text-amber-800 mb-2 cartoon-text">Start Watching Now!</h2>
                        <p class="text-amber-900 mb-4 sm:mb-6 font-comic text-base sm:text-lg px-4 font-semibold">Discover your favorite Tom & Jerry episodes</p>
                        <div class="flex flex-col sm:flex-row gap-3 sm:gap-4 justify-center px-4">
                            <button @onclick="ScrollToFeatured" 
                                    class="cartoon-button px-6 sm:px-8 py-3 sm:py-4 text-white font-bold font-cartoon text-base sm:text-lg">
                                🎬 Browse Episodes
                            </button>
                            <button @onclick="ScrollToAllEpisodes" 
                                    class="px-6 sm:px-8 py-3 sm:py-4 bg-soft-blue text-amber-800 rounded-2xl hover:bg-cartoon-yellow transition-colors font-bold font-comic text-base sm:text-lg border-2 border-amber-800 shadow-lg hover:shadow-xl transform hover:-translate-y-1">
                                📺 View All
                            </button>
                            <button @onclick="GoToQuiz" 
                                    class="px-6 sm:px-8 py-3 sm:py-4 bg-cartoon-pink text-white rounded-2xl hover:bg-cartoon-red transition-colors font-bold font-comic text-base sm:text-lg border-2 border-white/30 shadow-lg hover:shadow-xl transform hover:-translate-y-1">
                                🧠 Take Quiz
                            </button>
                            <button @onclick="ShowRandomFact" 
                                    class="px-6 py-4 bg-cartoon-yellow/20 backdrop-blur-sm text-white rounded-2xl hover:bg-cartoon-yellow/30 transition-all font-bold font-comic text-lg border-2 border-cartoon-yellow/30">
                                💡 Random Fact
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 py-8">
        @if (StateService.IsLoading || !StateService.CurrentVideos.Any())
        {
            <!-- Enhanced Loading State -->
            <div class="space-y-8">
                <!-- Loading Header -->
                <div class="text-center py-8">
                    <div class="flex items-center justify-center mb-6">
                        <div class="w-16 h-16 rounded-full overflow-hidden ring-4 ring-red-200 animate-pulse">
                            <RandomSticker CssClass="w-full h-full" ImageCssClass="w-full h-full object-cover" AutoRefresh="true" RefreshIntervalSeconds="5" />
                        </div>
                    </div>
                    <div class="space-y-3">
                        <div class="h-8 bg-gray-200 rounded-lg w-64 mx-auto skeleton"></div>
                        <div class="h-4 bg-gray-200 rounded w-48 mx-auto skeleton"></div>
                    </div>
                </div>
                
                <!-- Featured Section Loading -->
                <div class="mb-12">
                    <div class="flex items-center space-x-3 mb-6">
                        <div class="w-10 h-10 bg-gray-200 rounded-full skeleton"></div>
                        <div class="space-y-2">
                            <div class="h-6 bg-gray-200 rounded w-48 skeleton"></div>
                            <div class="h-4 bg-gray-200 rounded w-32 skeleton"></div>
                        </div>
                    </div>
                    
                    <!-- Featured Video Grid Loading -->
                    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-6">
                        @for (int i = 0; i < 10; i++)
                        {
                            <div class="video-card-skeleton">
                                <!-- Thumbnail Skeleton -->
                                <div class="relative aspect-video bg-gray-200 rounded-lg overflow-hidden mb-3 skeleton">
                                    <div class="absolute inset-0 flex items-center justify-center">
                                        <div class="w-12 h-12 bg-gray-300 rounded-full animate-pulse"></div>
                                    </div>
                                </div>
                                
                                <!-- Video Info Skeleton -->
                                <div class="space-y-2">
                                    <!-- Title Skeleton -->
                                    <div class="space-y-1">
                                        <div class="h-4 bg-gray-200 rounded skeleton"></div>
                                        <div class="h-4 bg-gray-200 rounded w-3/4 skeleton"></div>
                                    </div>
                                    
                                    <!-- Channel Info Skeleton -->
                                    <div class="flex items-center space-x-2">
                                        <div class="w-6 h-6 bg-gray-200 rounded-full skeleton"></div>
                                        <div class="h-3 bg-gray-200 rounded w-20 skeleton"></div>
                                    </div>
                                    
                                    <!-- Stats Skeleton -->
                                    <div class="h-3 bg-gray-200 rounded w-24 skeleton"></div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                
                <!-- All Episodes Section Loading -->
                <div class="mb-12">
                    <div class="flex items-center justify-between mb-6">
                        <div class="flex items-center space-x-3">
                            <div class="w-10 h-10 bg-gray-200 rounded-full skeleton"></div>
                            <div class="space-y-2">
                                <div class="h-6 bg-gray-200 rounded w-40 skeleton"></div>
                                <div class="h-4 bg-gray-200 rounded w-28 skeleton"></div>
                            </div>
                        </div>
                        
                        <!-- Filter Options Skeleton -->
                        <div class="flex items-center space-x-2">
                            <div class="h-8 bg-gray-200 rounded-lg w-12 skeleton"></div>
                            <div class="h-8 bg-gray-200 rounded-lg w-16 skeleton"></div>
                            <div class="h-8 bg-gray-200 rounded-lg w-16 skeleton"></div>
                        </div>
                    </div>
                    
                    <!-- All Videos Grid Loading -->
                    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-6">
                        @for (int i = 0; i < 20; i++)
                        {
                            <div class="video-card-skeleton">
                                <!-- Thumbnail Skeleton -->
                                <div class="relative aspect-video bg-gray-200 rounded-lg overflow-hidden mb-3 skeleton">
                                    <div class="absolute inset-0 flex items-center justify-center">
                                        <div class="w-12 h-12 bg-gray-300 rounded-full animate-pulse"></div>
                                    </div>
                                </div>
                                
                                <!-- Video Info Skeleton -->
                                <div class="space-y-2">
                                    <!-- Title Skeleton -->
                                    <div class="space-y-1">
                                        <div class="h-4 bg-gray-200 rounded skeleton"></div>
                                        <div class="h-4 bg-gray-200 rounded w-3/4 skeleton"></div>
                                    </div>
                                    
                                    <!-- Channel Info Skeleton -->
                                    <div class="flex items-center space-x-2">
                                        <div class="w-6 h-6 bg-gray-200 rounded-full skeleton"></div>
                                        <div class="h-3 bg-gray-200 rounded w-20 skeleton"></div>
                                    </div>
                                    
                                    <!-- Stats Skeleton -->
                                    <div class="h-3 bg-gray-200 rounded w-24 skeleton"></div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                
                <!-- Loading Message -->
                <div class="text-center py-8">
                    <div class="inline-flex items-center space-x-3 bg-white rounded-xl px-6 py-4 shadow-lg border border-gray-200">
                        <div class="animate-spin rounded-full h-6 w-6 border-2 border-gray-200 border-t-red-600"></div>
                        <span class="text-gray-700 font-medium">Loading Classic Episodes...</span>
                    </div>
                </div>
            </div>
        }
        else
        {
            <!-- Featured Section -->
            <div id="featured" class="mb-8 sm:mb-12">
                <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6 sm:mb-8 gap-4">
                    <div class="flex items-center space-x-3 sm:space-x-4">
                        <div class="w-10 h-10 sm:w-12 sm:h-12 bg-gradient-to-r from-tom-blue to-cartoon-red rounded-full flex items-center justify-center shadow-lg cartoon-rounded">
                            <svg class="w-5 h-5 sm:w-6 sm:h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd"/>
                            </svg>
                        </div>
                        <div>
                            <h2 class="text-2xl sm:text-3xl font-bold font-cartoon text-amber-800 cartoon-text">Featured Episodes</h2>
                            <p class="text-amber-900 font-comic text-base sm:text-lg font-semibold">Selected classics that never get old! 🎭</p>
                        </div>
                    </div>
                    <div class="flex items-center space-x-3">
                        <button @onclick="RefreshFeaturedEpisodes" 
                                class="px-4 sm:px-6 py-2 sm:py-3 text-xs sm:text-sm bg-tom-blue text-white rounded-2xl font-bold font-comic hover:bg-tom-dark-blue transition-colors cartoon-rounded">
                            🔄 Refresh Featured
                        </button>
                        <div class="w-3 h-3 bg-cartoon-red rounded-full animate-pulse cartoon-rounded"></div>
                    </div>
                </div>
                
                <!-- Featured Video Grid -->
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-4 sm:gap-6">
                    @foreach (var item in StateService.FeaturedVideos)
                    {
                        <Thumbnail VideoModel="@item"/>
                    }
                </div>
            </div>
            
            <!-- Sticker Gallery Section -->
            <div id="sticker-gallery" class="mb-8 sm:mb-12">
                <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6 sm:mb-8 gap-4">
                    <div class="flex items-center space-x-3 sm:space-x-4">
                        <div class="w-10 h-10 sm:w-12 sm:h-12 bg-gradient-to-r from-cartoon-pink to-cartoon-red rounded-full flex items-center justify-center shadow-lg cartoon-rounded">
                            <svg class="w-5 h-5 sm:w-6 sm:h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"/>
                            </svg>
                        </div>
                        <div>
                            <h2 class="text-2xl sm:text-3xl font-bold font-cartoon text-amber-800 cartoon-text">Tom & Jerry Stickers</h2>
                            <p class="text-amber-900 font-comic text-base sm:text-lg font-semibold">Collect your favorite character moments! 🎭✨</p>
                        </div>
                    </div>
                    
                    <!-- Sticker Actions -->
                    <div class="flex flex-wrap items-center gap-2 sm:gap-3">
                        <button @onclick="RefreshStickers" 
                                class="px-4 sm:px-6 py-2 sm:py-3 text-xs sm:text-sm bg-tom-blue text-white rounded-2xl font-bold font-comic hover:bg-tom-dark-blue transition-colors cartoon-rounded">
                            🔄 Refresh
                        </button>
                        <button @onclick="ShowAllStickers" 
                                class="px-4 sm:px-6 py-2 sm:py-3 text-xs sm:text-sm bg-soft-blue text-amber-800 rounded-2xl font-bold font-comic hover:bg-cartoon-yellow transition-colors border-2 border-amber-800 cartoon-rounded">
                            👀 View All
                        </button>
                    </div>
                </div>
                
                <!-- Sticker Gallery -->
                <StickerGallery MaxStickers="12" OnStickerSelected="OnStickerSelected" />
            </div>

            <!-- All Episodes Section -->
            <div id="all-episodes" class="mb-8 sm:mb-12">
                <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6 sm:mb-8 gap-4">
                    <div class="flex items-center space-x-3 sm:space-x-4">
                        <div class="w-10 h-10 sm:w-12 sm:h-12 bg-gradient-to-r from-cartoon-yellow to-cartoon-orange rounded-full flex items-center justify-center shadow-lg cartoon-rounded-alt">
                            <svg class="w-5 h-5 sm:w-6 sm:h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
                            </svg>
                        </div>
                        <div>
                            <h2 class="text-2xl sm:text-3xl font-bold font-cartoon text-amber-800 cartoon-text">All Episodes</h2>
                            <p class="text-amber-900 font-comic text-base sm:text-lg font-semibold">Complete collection of timeless adventures! 🎪</p>
                        </div>
                    </div>
                    
                    <!-- Filter Options -->
                    <div class="flex flex-wrap items-center gap-2 sm:gap-3">
                        <button @onclick="@(() => ApplyFilter("All"))" 
                                class="@GetFilterButtonClass("All")">
                            All
                        </button>
                        <button @onclick="@(() => ApplyFilter("Classic"))" 
                                class="@GetFilterButtonClass("Classic")">
                            Classic
                        </button>
                        <button @onclick="@(() => ApplyFilter("Modern"))" 
                                class="@GetFilterButtonClass("Modern")">
                            Modern
                        </button>
                    </div>
                </div>
                
                <!-- All Videos Grid -->
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-4 sm:gap-6">
                    @foreach (var item in filteredVideos)
                    {
                        <Thumbnail VideoModel="@item"/>
                    }
                </div>
            </div>
        }
    </div>
</div>

<!-- Snackbar Component -->
<Snackbar @ref="snackbar" />

@code
{
    private string heroSearchTerm = string.Empty;
    private string activeFilter = "All";
    private IEnumerable<Video> filteredVideos = Enumerable.Empty<Video>();
    private Snackbar snackbar = new();

    public void GoTOPage(Video video)
    {
        nav.NavigateTo($"playmedia/{video.Id}");
    }

    private void PerformHeroSearch()
    {
        if (!string.IsNullOrEmpty(heroSearchTerm))
        {
            nav.NavigateTo($"Search/{Uri.EscapeDataString(heroSearchTerm)}");
        }
    }

    private void HandleHeroSearchKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            PerformHeroSearch();
        }
    }

    private async Task ScrollToSection(string sectionId)
    {
        await JSRuntime.InvokeVoidAsync("scrollToElement", sectionId);
    }

    private async Task ScrollToFeatured()
    {
        await ScrollToSection("featured");
    }

    private async Task ScrollToAllEpisodes()
    {
        await ScrollToSection("all-episodes");
    }

    private async Task ScrollToStickerGallery()
    {
        await ScrollToSection("sticker-gallery");
    }

    private void GoToQuiz()
    {
        nav.NavigateTo("quiz");
    }

    private void RefreshStickers()
    {
        // This will trigger a refresh of the sticker gallery
        InvokeAsync(StateHasChanged);
    }

    private void ShowAllStickers()
    {
        // Navigate to the dedicated stickers page
        nav.NavigateTo("stickers");
    }

    private async Task OnStickerSelected(Sticker sticker)
    {
        // Handle sticker selection - could show a modal, navigate, or perform an action
        await snackbar.ShowAsync("Sticker Selected!", $"You selected: {sticker.DisplayName}!", "🎭", SnackbarType.Success, 4000);
    }

    private async Task ShowCharacterInfo(string character)
    {
        string info = character == "Tom" 
            ? "Tom is a blue-grey cat who lives in the house with his owner. Despite his best efforts, he can never catch Jerry, but that doesn't stop him from trying! Tom is known for his elaborate schemes and comedic failures."
            : "Jerry is a small brown mouse who lives in the house. He's incredibly clever and always manages to outsmart Tom with his quick thinking and resourcefulness. Jerry loves cheese and enjoys playing tricks on Tom.";
        
        string icon = character == "Tom" ? "🐱" : "🐭";
        await snackbar.ShowAsync($"{character} Info", info, icon, SnackbarType.Info, 8000);
    }

    private async Task ShowRandomFact()
    {
        var fact = RandomFactsService.GetRandomFact();
        await snackbar.ShowAsync("🎭 Fun Fact", fact, "💡", SnackbarType.Info, 6000);
    }

    private async Task RefreshFeaturedEpisodes()
    {
        await StateService.RefreshFeaturedVideosAsync(StateService.CurrentVideos, 10);
    }

    private void ApplyFilter(string filter)
    {
        activeFilter = filter;
        
        if (!StateService.CurrentVideos.Any())
        {
            filteredVideos = Enumerable.Empty<Video>();
            return;
        }

        var videos = StateService.CurrentVideos.ToList();
        
        switch (filter)
        {
            case "All":
                // Sequential order (by ID)
                filteredVideos = videos.OrderBy(v => int.Parse(v.Id)).ToList();
                break;
            case "Classic":
                // Random order
                var random = new Random();
                filteredVideos = videos.OrderBy(x => random.Next()).ToList();
                break;
            case "Modern":
                // Inverse order (newest first)
                filteredVideos = videos.OrderByDescending(v => int.Parse(v.Id)).ToList();
                break;
            default:
                filteredVideos = videos;
                break;
        }
        
        StateHasChanged();
    }

    private string GetFilterButtonClass(string filter)
    {
        return activeFilter == filter
            ? "px-4 sm:px-6 py-2 sm:py-3 text-xs sm:text-sm bg-tom-blue text-white rounded-2xl font-bold font-comic hover:bg-tom-dark-blue transition-colors cartoon-rounded"
            : "px-4 sm:px-6 py-2 sm:py-3 text-xs sm:text-sm bg-soft-blue text-amber-800 rounded-2xl font-bold font-comic hover:bg-cartoon-yellow transition-colors border-2 border-amber-800 cartoon-rounded";
    }

    protected override async Task OnInitializedAsync()
    {
        StateService.OnStateChanged += StateHasChanged;
        
        await StateService.SetLoadingStateAsync(true);
        
        try
        {
            await VideoService.InitializeAsync();
            var videos = await VideoService.GetAllVideosAsync();
            await StateService.SetVideosAsync(videos);
            
            // Set random featured videos
            await StateService.RefreshFeaturedVideosAsync(videos, 10);
            
            // Apply initial filter (All - sequential order)
            ApplyFilter("All");
        }
        finally
        {
            await StateService.SetLoadingStateAsync(false);
        }
    }

    public void Dispose()
    {
        StateService.OnStateChanged -= StateHasChanged;
    }
}