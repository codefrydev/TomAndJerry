@inject Data Datas
@inject NavigationManager nav
@inject IJSRuntime JSRuntime
<MudAppBar 
    Color="Color.Secondary" 
    Fixed="true" 
    Dense="true" 
    Elevation="0" 
    Class="">
    <MudIconButton 
        Icon="@Icons.Material.Filled.Home" 
        Color="Color.Inherit" 
        Edge="Edge.Start"
        OnClick="GoToHomePage" />
    <MudSpacer />
    <MudPaper Elevation="0" Class="mx-6">
        <div class="InputContainer">
            <input type="text"
                   name="text"
                   @bind-value="@FindData"
                   class="input" id="input"
                   placeholder="Search" >

            <label for="input" class="labelforsearch">

            </label>

            <button class="micButton" @onclick="GoTOPage">
                <svg viewBox="0 0 512 512" class="searchIcon"><path d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z"></path></svg>
            </button>
        </div>
    </MudPaper>
</MudAppBar>
 
@code {     
    public string FindData = string.Empty;
    
    void GoToHomePage()
    { 
        nav.NavigateTo(""); 
    }

    public void GoTOPage()
    {
        Filter();
        if (!string.IsNullOrEmpty(FindData))
        {
            nav.NavigateTo($"Search/{FindData}");
        }
    } 
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("blazorKeyPressed", DotNetObjectReference.Create(this));
        }
    }
    [JSInvokable]
    public void OnArrowKeyPressed(string key)
    {
        Filter();
        if (key == "Enter" && !string.IsNullOrEmpty(FindData))
        {
            nav.NavigateTo($"Search/{FindData}");
        }

        StateHasChanged();
    } 
    void Filter()
    {
        Datas.FilteredData = Datas.VideosData.Where(x => x.Description != null && x.Description.Contains(FindData, StringComparison.OrdinalIgnoreCase))
                .ToList();
    }
}
 ﻿
@code{
    protected override async Task OnInitializedAsync()
    {
        Datas.OnChange += StateHasChanged;
        await Datas.InitializeAsync();
    }

    public void Dispose()
    {
        Datas.OnChange -= StateHasChanged;
    }
}
<style>
    .InputContainer {
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: rgb(255, 255, 255);
        border-radius: 10px;
        overflow: hidden;
        cursor: pointer;
        padding-left: 15px;
        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.075);
    }

    .input {
        width: 100%;
        height: 100%;
        border: none;
        outline: none;
        font-size: xx-large;
        font-weight: bold;
        caret-color: rgb(255, 81, 0);
    }


    .searchIcon {
        width: 13px;
    }

    .border {
        height: 40%;
        width: 1.3px;
        background-color: rgb(223, 223, 223);
    }

    .micIcon {
        width: 12px;
    }

    .micButton {
        padding: 0px 15px 0px 12px;
        border: none;
        background-color: transparent;
        height: 40px;
        cursor: pointer;
        transition-duration: .3s;
    }

    .searchIcon path {
        fill: rgb(114, 114, 114);
    }

    .micIcon path {
        fill: rgb(255, 81, 0);
    }

    .micButton:hover {
        background-color: rgb(255, 230, 230);
        transition-duration: .3s;
    }
</style> 