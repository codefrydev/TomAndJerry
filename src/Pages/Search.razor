@page "/Search/{searchterm?}"
@using TomAndJerry.Services
@inject NavigationManager nav
@inject IVideoService VideoService
@inject ISearchService SearchService
@inject IStateService StateService

<PageTitle>Search Results - Tom & Jerry</PageTitle>

<div class="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-100">

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 py-8">
        <!-- Search Suggestions -->
        
        
        @if (StateService.FilteredVideos.Any())
        {
            <!-- Results Header -->
            <div class="mb-6">
                <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-3">
                        <div class="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
                            <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                        </div>
                        <div>
                            <h2 class="text-xl font-bold text-gray-900">@(string.IsNullOrWhiteSpace(searchterm) ? "All Episodes" : "Episodes Found")</h2>
                            <p class="text-gray-600">
                                @if (string.IsNullOrWhiteSpace(searchterm))
                                {
                                    <text>@StateService.FilteredVideos.Count() episodes available</text>
                                }
                                else
                                {
                                    <text>@StateService.FilteredVideos.Count() results for "@searchterm"</text>
                                }
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Video Grid -->
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6 mb-8">
                @foreach (var item in StateService.FilteredVideos)
                {
                    <div class="group">
                        <Thumbnail VideoModel="@item"/>
                    </div>
                }
            </div>
        }
        else
        {
            <!-- No Results State -->
            <div class="text-center py-16">
                <div class="bg-white rounded-3xl p-12 shadow-xl border border-gray-200 max-w-lg mx-auto">
                    <!-- Animated Icon -->
                    <div class="relative mb-8">
                        <div class="w-24 h-24 bg-gradient-to-r from-gray-100 to-gray-200 rounded-full flex items-center justify-center mx-auto animate-pulse">
                            <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                            </svg>
                        </div>
                        <div class="absolute -top-2 -right-2 w-8 h-8 bg-red-100 rounded-full flex items-center justify-center">
                            <svg class="w-4 h-4 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </div>
                    </div>
                    
                    <h3 class="text-2xl font-bold text-gray-900 mb-3">No episodes found</h3>
                    <p class="text-gray-600 mb-8">We couldn't find any episodes matching <span class="font-semibold text-red-600">"@searchterm"</span></p>
                    
                    <!-- Search Suggestions -->
                    <div class="space-y-4">
                        <div class="flex items-center space-x-2 text-sm text-gray-500">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            <span>Try searching for:</span>
                        </div>
                        <div class="flex flex-wrap justify-center gap-3">
                            <button class="px-4 py-2 text-sm bg-gradient-to-r from-red-50 to-red-100 text-red-700 rounded-full hover:from-red-100 hover:to-red-200 transition-all duration-200 font-medium shadow-sm hover:shadow-md">
                                Classic Episodes
                            </button>
                            <button class="px-4 py-2 text-sm bg-gradient-to-r from-blue-50 to-blue-100 text-blue-700 rounded-full hover:from-blue-100 hover:to-blue-200 transition-all duration-200 font-medium shadow-sm hover:shadow-md">
                                Funny Moments
                            </button>
                            <button class="px-4 py-2 text-sm bg-gradient-to-r from-green-50 to-green-100 text-green-700 rounded-full hover:from-green-100 hover:to-green-200 transition-all duration-200 font-medium shadow-sm hover:shadow-md">
                                Best Chases
                            </button>
                        </div>
                    </div>
                    
                    <!-- Back to Home Button -->
                    <div class="mt-8 pt-6 border-t border-gray-200">
                        <button @onclick="@(() => nav.NavigateTo("/"))" 
                                class="px-6 py-3 bg-gradient-to-r from-red-600 to-red-700 text-white rounded-xl hover:from-red-700 hover:to-red-800 transition-all duration-200 font-medium shadow-lg hover:shadow-xl transform hover:-translate-y-1">
                            <span class="flex items-center space-x-2">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
                                </svg>
                                <span>Back to Home</span>
                            </span>
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


@code
{
    [Parameter] public string searchterm { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        StateService.OnStateChanged += StateHasChanged;
        
        await StateService.SetLoadingStateAsync(true);
        
        try
        {
            await VideoService.InitializeAsync();
            
            // If search term is empty, show all videos; otherwise perform search
            if (string.IsNullOrWhiteSpace(searchterm))
            {
                var allVideos = await VideoService.GetAllVideosAsync();
                await StateService.SetFilteredVideosAsync(allVideos);
                await StateService.SetSearchTermAsync("");
            }
            else
            {
                var searchResults = await SearchService.SearchAsync(searchterm);
                await StateService.SetFilteredVideosAsync(searchResults);
                await StateService.SetSearchTermAsync(searchterm);
            }
        }
        finally
        {
            await StateService.SetLoadingStateAsync(false);
        }
    }

    public void Dispose()
    {
        StateService.OnStateChanged -= StateHasChanged;
    }

    public void GoTOPage(Video video)
    {
        nav.NavigateTo($"playmedia/{video.Id}");
    }
}
