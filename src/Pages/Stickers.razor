@page "/stickers"
@using TomAndJerry.Services
@using TomAndJerry.Model
@using TomAndJerry.Component
@using TomAndJerry.Utils
@inject IStickerService StickerService
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime
@inject IRandomFactsService RandomFactsService

<PageTitle>Tom & Jerry Stickers - Tom & Jerry</PageTitle>

<div class="min-h-screen cartoon-bg">
    <!-- Header Section -->
    <div id="stickers-header" class="tom-jerry-header">
        <div class="max-w-7xl mx-auto px-4 py-8">
            <div class="text-center text-white">
                <div class="flex items-center justify-center mb-4">
                    <div class="w-16 h-16 rounded-full overflow-hidden ring-4 ring-white/30 shadow-2xl">
                        <RandomSticker Category="classic" CssClass="w-full h-full" ImageCssClass="w-full h-full object-cover" AutoRefresh="true" RefreshIntervalSeconds="8" />
                    </div>
                </div>
                <h1 id="stickers-main-title" class="text-3xl sm:text-4xl md:text-5xl font-bold font-cartoon mb-3 text-white cartoon-text">Tom & Jerry Stickers</h1>
                <p id="stickers-description" class="text-lg text-white/90 mb-6 max-w-2xl mx-auto font-comic">
                    Collect all your favorite character moments! üé≠‚ú®
                </p>
                
                <!-- Back Button -->
                <button id="back-to-episodes-btn" @onclick="GoBack" 
                        class="cartoon-button px-6 py-3 text-white font-bold font-cartoon text-base">
                    ‚Üê Back to Episodes
                </button>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div id="stickers-main-content" class="max-w-7xl mx-auto px-4 py-8">
        <!-- Filter Section -->
        <div id="filter-section" class="mb-8">
            <div id="filter-buttons" class="flex flex-wrap items-center justify-center gap-3 mb-6">
                <button id="filter-all-stickers-btn" @onclick="() => FilterByCategory(string.Empty)" 
                        class="px-4 py-2 text-sm bg-tom-blue text-white rounded-2xl font-bold font-comic hover:bg-tom-dark-blue transition-colors cartoon-rounded @(string.IsNullOrEmpty(selectedCategory) ? "ring-2 ring-white" : "")">
                    All Stickers
                </button>
                @foreach (var category in availableCategories)
                {
                    <button @onclick="() => FilterByCategory(category)" 
                            class="px-4 py-2 text-sm bg-soft-blue text-amber-800 rounded-2xl font-bold font-comic hover:bg-cartoon-yellow transition-colors border-2 border-amber-800 cartoon-rounded @(selectedCategory == category ? "ring-2 ring-amber-800" : "")">
                        @category
                    </button>
                }
            </div>
            
            <!-- Stats -->
            <div id="stickers-stats" class="text-center mb-6">
                <p class="text-amber-800 font-comic font-semibold">
                    Showing @filteredStickers.Count() of @allStickers.Count() stickers
                    @if (!string.IsNullOrEmpty(selectedCategory))
                    {
                        <span>in <strong>@selectedCategory</strong> category</span>
                    }
                </p>
            </div>
        </div>

        <!-- Sticker Gallery -->
        <div id="sticker-gallery-container">
            <StickerGallery MaxStickers="24" Category="@selectedCategory" OnStickerSelected="OnStickerSelected" />
        </div>

        <!-- Load More Button -->
        @if (filteredStickers.Count() > 12)
        {
            <div id="load-more-section" class="text-center mt-8">
                <button id="load-more-stickers-btn" @onclick="LoadMoreStickers" 
                        class="cartoon-button px-8 py-4 text-white font-bold font-cartoon text-lg">
                    Load More Stickers üé®
                </button>
            </div>
        }
    </div>
</div>

<!-- Snackbar Component -->
<Snackbar @ref="snackbar" />

@code {
    private List<Sticker> allStickers = new();
    private List<Sticker> filteredStickers = new();
    private List<string> availableCategories = new();
    private string selectedCategory = string.Empty;
    private int currentDisplayCount = 12;
    private Snackbar snackbar = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadStickersAsync();
    }

    private async Task LoadStickersAsync()
    {
        allStickers = await StickerService.GetAllStickersAsync();
        availableCategories = allStickers.Select(s => s.Category).Distinct().OrderBy(c => c).ToList();
        FilterByCategory(string.Empty);
    }

    private void FilterByCategory(string category)
    {
        selectedCategory = category;
        if (string.IsNullOrEmpty(category))
        {
            filteredStickers = allStickers.ToList();
        }
        else
        {
            filteredStickers = allStickers.Where(s => s.Category.Equals(category, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        currentDisplayCount = 12;
        StateHasChanged();
    }

    private async Task LoadMoreStickers()
    {
        currentDisplayCount = Math.Min(currentDisplayCount + 12, filteredStickers.Count());
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnStickerSelected(Sticker sticker)
    {
        var fact = RandomFactsService.GetRandomFact();
        await snackbar.ShowAsync("üé≠ Fun Fact", fact, "üí°", SnackbarType.Info, 7000);
    }

    private void GoBack()
    {
        Nav.NavigateTo("");
    }
}
